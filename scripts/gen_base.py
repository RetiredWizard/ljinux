#!/usr/bin/python3
from os import listdir, system, walk, path, chdir, getcwd, remove
from shutil import copyfile
from sys import path as spath


spath.append("./jz")
from jz import compress


def gen_fol_list() -> list:
    print("[1/6] Generating folders list")
    fls = []
    olddir = getcwd()
    chdir("../base/Beryllium")
    for root, dirs, files in walk("."):
        for dirc in dirs:
            tg = "/" + path.join(root, dirc).replace("./", "")
            fls.append(tg)
    chdir(olddir)
    return fls


def gen_fil_list() -> list:
    print("[2/6] Generating files list")
    fil = []
    olddir = getcwd()
    chdir("../base/Beryllium")
    for root, dirs, files in walk("."):
        for f in files:
            tg = "/" + path.join(root, f).replace("./", "")
            if not (
                tg.startswith("/bin/")
                or "/man/" in tg
                or "/help/" in tg
                or tg.endswith(".gitkeep")
            ):
                fil.append(tg)
    chdir(olddir)
    return fil


def mk_scripts(folders: list, files: list) -> None:
    print("[4/6] Generating scripts")
    autogen_msg = "# This is an automatically generated script, please do not edit this file manually.\n\n"
    inst = autogen_msg
    strap = autogen_msg
    uninst = autogen_msg

    rmfol = []

    sent_rml = False

    for i in folders:
        print("[-/-] FOLDER " + i)
        inst += 'be.based.run("mkdir ' + i + '")\n'
        strap += (
            'try:\n    mkdir(path.join(root, "'
            + i[1:]
            + '"))\nexcept FileExistsError:\n    pass\n'
        )
        rmfol.append(i)
    for i in files:
        inst += 'be.based.run("cp ' + i[i.rfind("/") + 1 :] + " " + i + '")\n'
        strap += (
            'shutil.copyfile("'
            + i[i.rfind("/") + 1 :]
            + '", path.join(root, "'
            + i[1:]
            + '"))\n'
        )
        if not sent_rml:
            sent_rml = True
            uninst += 'be.based.run("rm'
        uninst += " " + i

    if sent_rml:
        uninst += '")\n'
    rmfol.reverse()
    for i in rmfol:
        uninst += 'be.based.run("rmdir ' + i + '")\n'

    signoff = 'be.api.setvar("return", "0")\n'
    inst += signoff
    uninst += signoff

    with open("core_packages/base/installer.py", "w") as f:
        f.write(inst)
    with open("core_packages/base/strap.py", "w") as f:
        f.write(strap)
    with open("core_packages/base/uninstaller.py", "w") as f:
        f.write(uninst)

    # print("Installer:\n" + inst + "\nStrapper:\n" + strap + "\nUninstaller:\n" + uninst)


def rm_old_files() -> None:
    print("[3/6] Removing old files")
    try:
        remove("core_packages/base.jpk")
    except FileNotFoundError:
        pass
    olddir = getcwd()
    chdir("core_packages/base")
    for i in listdir():
        if i != "Manifest.json":
            remove(i)
    chdir(olddir)


def copy_files(files: list) -> None:
    print("[5/6] Copying new files")
    copied = set()
    for i in files:
        if i[i.rfind("/") + 1 :] in copied:
            raise RuntimeError("Same-name file in filesystem!")
        else:
            copied.add(i[i.rfind("/") + 1 :])
            copyfile(
                "../base/Beryllium" + i, "core_packages/base/" + i[i.rfind("/") + 1 :]
            )


def package() -> None:
    print("[6/6] Packaging")
    olddir = getcwd()
    chdir("core_packages/base")
    execstr = ""
    for filee in listdir():
        execstr += f", '{filee}'"
    execstr = "compress(" + execstr[2:] + ", '../base.jpk')"
    exec(execstr)
    chdir(olddir)


if __name__ == "__main__":
    print("\nGenerating base package..")
    folders = gen_fol_list()
    files = gen_fil_list()
    # print(folders)
    # print(files)
    rm_old_files()
    mk_scripts(folders, files)
    copy_files(files)
    package()
    # exit(1)
