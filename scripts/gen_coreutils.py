#!/usr/bin/python3
from os import listdir, system, walk, path, chdir, getcwd, remove
from shutil import copyfile
from sys import path as spath


spath.append("./jz")
from jz import compress


def gen_fil_list() -> list:
    print("[1/5] Generating files list")
    fil = []
    olddir = getcwd()
    chdir("../base/Beryllium/bin")
    for root, dirs, files in walk("."):
        for f in files:
            fil.append("/bin/" + path.join(root, f).replace("./", ""))
    chdir(olddir)
    chdir("../base/Beryllium/usr")
    for root, dirs, files in walk("."):
        for f in files:
            fil.append("/usr/" + path.join(root, f).replace("./", ""))
    chdir(olddir)
    return fil


def mk_scripts(files: list) -> None:
    print("[3/5] Generating scripts")
    autogen_msg = "# This is an automatically generated script, please do not edit this file manually.\n\n"
    inst = autogen_msg
    strap = autogen_msg
    uninst = autogen_msg

    sent_rml = False

    for i in files:
        inst += 'be.based.run("cp ' + i[i.rfind("/") + 1 :] + " " + i + '")\n'
        strap += (
            'shutil.copyfile("'
            + i[i.rfind("/") + 1 :]
            + '", path.join(root, "'
            + i[1:]
            + '"))\n'
        )
        if not sent_rml:
            sent_rml = True
            uninst += 'be.based.run("rm'
        uninst += " " + i

    if sent_rml:
        uninst += '")\n'

    signoff = 'be.api.setvar("return", "0")\n'
    inst += signoff
    uninst += signoff

    with open("core_packages/coreutils/installer.py", "w") as f:
        f.write(inst)
    with open("core_packages/coreutils/strap.py", "w") as f:
        f.write(strap)
    with open("core_packages/coreutils/uninstaller.py", "w") as f:
        f.write(uninst)

    # print("Installer:\n" + inst + "\nStrapper:\n" + strap + "\nUninstaller:\n" + uninst)


def rm_old_files() -> None:
    print("[2/5] Removing old files")
    try:
        remove("core_packages/coreutils.jpk")
    except FileNotFoundError:
        pass
    olddir = getcwd()
    chdir("core_packages/coreutils")
    for i in listdir():
        if i != "Manifest.json":
            remove(i)
    chdir(olddir)


def copy_files(files: list) -> None:
    print("[4/5] Copying new files")
    copied = set()
    for i in files:
        if i[i.rfind("/") + 1 :] in copied:
            raise RuntimeError("Same-name file in bin!")
        else:
            copied.add(i[i.rfind("/") + 1 :])
            copyfile(
                "../base/Beryllium" + i,
                "core_packages/coreutils/" + i[i.rfind("/") + 1 :],
            )


def package() -> None:
    print("[5/5] Packaging")
    olddir = getcwd()
    chdir("core_packages/coreutils")
    execstr = ""
    for filee in listdir():
        execstr += f", '{filee}'"
    execstr = "compress(" + execstr[2:] + ", '../coreutils.jpk')"
    exec(execstr)
    chdir(olddir)


if __name__ == "__main__":
    print("\nGererating coreutils package..")
    files = gen_fil_list()
    # print(files)
    rm_old_files()
    mk_scripts(files)
    copy_files(files)
    package()
    # exit(1)
