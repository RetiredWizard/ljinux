 /======================================\
/-Ljinux standalone documentation sheet--\
\-----| bill88t |------------------------/
 \======================================/

      /---------------|
----<| Basic commands |
      \---------------|

help [COMMAND]

OUTPUTS A BASIC LIST OF COMMANDS TO SERIAL OUT


cd [DIR]...

CHANGES TO SPECIFIED DIRECTORY


echo [DATA]...

PRINT SOME VARIABLES OR TEXT ONTO SERIAL OUT


var [DATA]...

CREATE A NEW VARIABLE. SYNTAX: var a = "ok"
NUMBERS DO NOT NEED BRACKETS.
THE COMMAND ITSELF IS OPTIONAL (a = "is also valid")


uname [-a]

OUTPUTS THE INFO ABOUT THE DEVICE TO SERIAL OUT


mkdir [DIR]...

MAKE A NEW DIRECTORY


rmdir [DIR]...

DELETE A DIRECTORY


rm [FILE]...

DELETE A FILE


ls [OPTIONS]... [DIR]...

OUTPUTS THE DIRECTORY LISTING TO SERIAL OUT


pwd

OUTPUTS THE CURRENT DIRECTORY TO SERIAL OUT


display [OPERATION] [OPERATION DATA]

DISPLAYS SOMETHING ON THE I2C DISPLAY
RETURNS OBJECT ID, DO NOT LOSE IT
BUDGET DIDNT ALLOW PORTING WAYLAND, SO I MADE FARLAND
OPERATIONS:

text

dot

line

rectangle

square

circle

rhombus

move

delete


exec [FILE]

LOADS AN .lja FILE AND EXECUTES IT'S COMMANDS


pexec [-n] [python commands]

RUNS PYTHON COMMANDS
with -n DOES NOT PRINT THE CIRUITPY TEXT


fpexec [-n] [file]

SAME AS pexec BUT USES A FILE INSTEAD


wait [TIME]

IN SECONDS


goto [LINE]

GOTO INTERPRETED LINE AND RERUN FROM THERE


exit [CODE]

EXIT THE CURRENT PROCESS WITH AN EXIT CODE, DEFAULT = 0


timedate [set]...

VIEW THE TIME, OR SET IT
VALID FORMAT "time set dd mm yyyy hr mm ss"


su

DISABLE SECURITY, ASKS FOR PASSWORD
DEFAULT PASSWORD == Ljinux


neofetch

VIEW SOME SYSTEM INFO


history [save/load/clear]

DISPLAYS THE HISTORY


webserver [args]

A INTEGRATED WEBSERVER
UNLESS A PATH IS GIVEN AS AN ARGUMENT, IT WILL TRY TO SERVE /ljinux/var/www/default/
SEND "webserver -k" TO KILL


devmode

ENABLES USB ACCESS AND OTHER DEVELOPMENT FEATURES
THIS PROHIBITS WRITE ACCESS TO THE BUILT IN FILESYSTEM


reboot [mode]

REBOOTS THE MICROCONTROLLER
OPTIONALLY YOU CAN PASS A REBOOT MODE (safemode, uf2, bootloader)


dmesg

PRINTS OUT THE DMESG LOG


cat [file]

PRINTS THE CONTENTS OF A FILE


head [n] [file]

PRINT THE FIRST [-n number] LINES OF FILE [file].


tail [n] [file]

PRINT THE LAST [-n number] LINES OF FILE [file].


sensors

PRINTS THE CURRENT SYSTEM SENSORS DATA


pinout

PRINTS THE PICO PINOUT MAP


man [COMMAND]

PRINT THE MANUAL FOR THE GIVEN [COMMAND]


detect

Fetch the term.detect_size(for context updating)


waitforserial

Waits for a serial connection


less [file]

opposite for more, except we don't have more..

      /------------|
----<| Config.json |
      \------------|

This is a complete summary of all the options available, to create a custom config, arrange them into a valid json, named as config-"board.id":

"fixrtc", bool, can be true or false. While true, disables hardware Real Time Clock (RTC).

"displaySCL" & "displaySDA", int, specifies the SSD1606 display i2c pins
"displayheight" & "displaywidth", int, said display height - width
"DISPLAYONLYMODE", false, bool, not yet implemented

"led", int, specifies the activity led pin. Set to 0 for board.LED
"ledtype", string, can be "generic" or "neopixel"

"SKIPTEMP" Debugging & extreme options, bools, keep them false
"SKIPCP"
"DEBUG"
"DEVBOARD"

The config file is no longer mandatory on simple boards, as the defaults are hardcoded in case they are missing / errored.

      /----------|
----<| Scripting |
      \----------|
      
Based script files need to have the .lja file extension. All internal or external commands can be used in scripts.
To have a script appear as a command, put it in /LjinuxRoot/bin/ or in the /bin of the sdcard.
To create a comment, simply write COMMENT in the beginning of the line.

To execute python code, you are advised to use pexec & fpexec.
The scope is the same as the one of ljinux and you can call & alter ljinux data freely. Security is not important when you don't have internet or usb.

To access argj from based scripts containing pexec, the best way is to use ljinux.based.user_vars["argj"].split()

      /---------------|
----<| Repo & Mirrors |
      \---------------|

The source & releases of Ljinux are primarily being made available to Github at: https://github.com/bill88t/ljinux
However it is also mirrored to my self-hosted Gitea instance at: https://git.port1.cf/bill88t/ljinux

      /-----------|
----<| Deployment |
      \-----------|

The bare minimum of files needed for ljinux to run is:
 - boot.py
 - code.py
 - ljinux.mpy

Without them Ljinux cannot function at all.
However it's highly recommended to have a root folder ("LjinuxRoot" or an sdcard) present.

      /-------|
----<| Errors |
      \-------|

The different errors used by the based shell.
CODE:
      ljinux.based.error([number])
      where [number] is one of the error below

1 : Syntax Error
      The command cannot work with the given arguments
      Read #basic-commands

2 : Input Error
      The input given is not understandable from the command

3 : Error
      This is a general error

4 : [file]: No such file or directory
      The file cannot be found

5 : Network unavailable
      The network interface is not functional

6 : Display not attached
      The display is not connected correctly

7 : Filesystem unwritable, pi in developer mode
      This error shows up when a write to the internal storage occures while developer mode is enabled. By CircuitPython design, when the internal storage is being made available from usb, it is unwritable to the os. To disable developer mode, delete the file "devm" from the root of LJINUX, and run the command "reboot"

8 : Missing files
      This error occurs when files needed for the command to run are missing.

9 : Missing arguments
      This error occur when the command is used without the necessary parameters.

10 : File exists
      A file that shouldn't exist, does exist.

      /----------|
----<| Functions |
      \----------|

Commons functions used by the commands.
CODE:
      ljinux.based.fn.[function_name](parameters)
      where [function_name] is one of the function below

* def get_valid_options(inpt, vopts)
      Return an options array if the given parameter start with the character '-'.
      Return an empty array if there is none, duplicate or invalid character followind '-'.
      Parameters:
            inpt : string with the second user input ex:'-n'
            vopts : string with valid option ex:'abc'

      /--------|
----<| jCurses |
      \--------|

jCurses are the ljinux version of nCurses.
The library is preinstalled in "/lib".

Each program should use it's own jcurses object.
Based, by default, creates the "term" jcurses object.

Useful functions:

    - .detect_size()
    Detects the size of the terminal & returns it as [rows, collumns]
    
    - .detect_pos()
    Detects the current cursor position & returns it as [row, collumn]
    
    - .ctx_reg(name)
    Registers the current cursor position as a bookmark with the name specified.
    
    - .move(ctx=None, x=None, y=None)
    Moves the cursor to a specified x (row), y (collumn), or a bookmark. You can specify both a bookmark & and x, y coordinate.
    In that case, the x, y will be used as an offset.
    
    - .clear()
    Clears the screen & goes to top.
    
    - .clear_line()
    Clears the current line.
    
    - .line(char)
    Draws a line with the given char.
    
    - .map()
    Testing function, prints chars inputted.

jCurses does not depend onto ljinux.

More documentation on jcurses will be added later.

      /-------------|
----<| Led activity |
      \-------------|

Ljinux supports both generic led's as well as neopixels for it's activity led.
It is adviced to use the onboard led.

Generic leds stay on when idle, and off on command activity.
Neopixels stay green when idle,
Glow more when special characters are being inputted,
Red when an error occurs,
Yellow on command activity and
Blue when waiting for serial connection.
