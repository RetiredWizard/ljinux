 /======================================\
/-Ljinux standalone documentation sheet--\
\-----| bill88t |------------------------/
 \======================================/

Official repository: https://github.com/bill88t/ljinux
This manual is up to date with commit  @ /feb/2024.
Anything passed that point is not covered by this manual.

      /------------|
----<| Index table |
      \------------|

0.  Index table          : line 10
1.  Basic commands       : line 0
2.  Scripting            : line 0
3.  Errors               : line 0
4.  Api functions        : line 0
5.  jCurses              : line 0
6.  Led activity         : line 0
7.  BetterPath           : line 0
8.  GPIO Usage           : line 0
9.  Network driver usage : line 0
10. Isolated processes   : line 0
11. Contributions        : line 0

      /---------------|
----<| Basic commands |
      \---------------|

alias [COMMAND=data]

Runs data, whenever command is typed


bell

Ring the bell on the current terminal


cat [file]

Catenates the contents of file [file]


cd [DIR]...

Changes to specified directory
Please refer to the betterpath section, on more info on how does the ljinux filesystem appear.


clear

Clear the current terminal


date [set]...

View the time, or set it
Valid format "date set dd mm yyyy hr mm ss"


detect

Fetch the term.detect_size() for context updating


devmode [OPTIONS]

Enables usb access and other development features.
This temporarily prohibits write access to the built in filesystem.
The notice can be skipped by passing -q.
This change for one boot.
To make this permenant, which is highly not recommended, pass -p.
To revert the change, set `usb_msc_enabled = false` under
section [LJINUX] in the board's `/settings.toml`.


df [-h]

Report all attached file system's space usage.


disconnect

Immediately disconnect the current terminal, if it can be disconnected.


dmesg

Prints out the current dmesg log.


echo [DATA]...

Print some variables or text.


ed [FILE]

A line-oriented text editor.


exec [FILE]

false

Returns false.


exit [CODE]

Exits ljinux with an exit code, default = 0
If ran over a remote connection, disconnects instead.


fpexec [file]

Runs a python file in a new process.


free [-b/-k/-m/-g]

Display memory usage.


halt

Sync all filesystems, and halt the system.


head [-n int] [FILE]

Output the first part of files.
By default displays the first 10 lines of the FILE.


help [COMMAND]

Displays all currently discovered commands.


history [save/load/clear]

Displays the command history.


hostname [VALUE]

Displays the hostname if no VALUE is passed, else sets it
to that VALUE.


jpkg [install/uninstall/list] [PACKAGE(S)]

The built-in ljinux package manager.
For more information run `jpkg --help`, `man jpkg` or
view section JPKG.


jz [-q/-d/--decompress] [JZ ARCHIVE] [TARGET DIRECTORY]

Decompress a .jz archive to the TARGET DIRECTORY.
Extracts to '.' if not specified.


ledset [int / int int int]

Set the led to the given value(s).


less [FILE]

Opposite of more, a simple file viewer.


ls [OPTIONS]... [DIR]...

Outputs the directory listing.


man [COMMAND]

Display the manual for the given [COMMAND] with `less`.


mkdir [DIR]...

Make a new directory


modprobe [MODULE as MODULE_TYPE]

Load a kernel MODULE with it's type specified by MODULE_TYPE.


nano [FILE]

A text editor similar to GNU/nano.


neofetch

A simple system info viewer.
Much less bloated than it's linux counterpart.


pexec [-n] [python commands]

Runs python commands in the current process.


pinout

Displays the current board's pinout map.


pwd

Print the current working directory.


python

Opens a virtual python REPL.
To pass commands instead of actually opening the REPL, use pexec instead.
To pass files to run instead of actually opening the REPL, use fpexec instead.


random

Returns a random number. Displays it if based is not silenced.


reboot [MODE]

Reboots ljinux and the board.
Optionally, you can pass a reboot MODE from: [safemode, uf2, bootloader]


reload

Reloads ljinux fully.


rm [FILE(S)]...

Delete FILE(S).
Recursive deletes not yet supported.


rmdir [DIR]...

Delete an empty directory.


runparts [FOLDER]

Run all the .py files in a folder by alphabetic order.
Used by init.


sensors

Print the current system sensors and their current values.


sleep [TIME]

Sleep TIME, in seconds.


sync

Sync all currently attached filesystems.


tail [-n int] [FILE]

Opposite of head.
Output the last part of files.
By default displays the last 10 lines of the FILE.


title [TEXT]

Sets the terminal title to the TEXT.

top

Display the current process stack, along with useful info.


touch [FILE]

Create a new FILE.


true

Returns true.


unalias [ALIAS]

Removes ALIAS.


uname [-a]

Print system information


Loads an .lja file and executes it's commands


unset [Variable]

Deletes a Variable.
Can also be used on GPIO variables.
The GPIO will be deinitialized.


var [DATA]... (!!!DEPRECATED, SOON TO BE REPLACED!!!)

Create a new variable. syntax: var a = "ok"
Numbers do not need brackets.
The command itself is optional (a = "is also valid")
GPIO pins can be allocated like: a = GP9
and used by setting them to either 0 or 1: a = 1


watch [-s] [-n SECONDS] [COMMAND]

Run a COMMAND every n SECONDS (default 2 seconds).
Hide the titlebar text with `-s`.


      /----------|
----<| Scripting |
      \----------|
      
Based script files need to have the .lja file extension. All internal or external commands
can be used in scripts.
To have a script appear as a command, put it in /LjinuxRoot/bin/ or in the /bin of the sdcard.

To execute python code, you are advised to use pexec & fpexec.
The scope is the same as the one of ljinux and you can call & alter ljinux data freely.
This however is very unsafe (as in, you may touch foreign variables), and you are instead advised
to use the given variable container storage.

When fpexec is called, the code is given an empty container storage under `pv[get_pid()]`.
You can manipulate it either directly or with the `vr` functions. More info in the Container Storage
section of the manual.

To access shell input you can use `ljinux.api.xarg()` or `ljinux.based.user_vars["argj"].split()`.
You can find more info regarding xarg under it's api documentation.


      /-------|
----<| Errors |
      \-------|

The different errors used by the based shell.
CODE:
      ljinux.based.error([number])
      where [number] is one of the error below

1 : Syntax Error
      The command cannot work with the given arguments
      Read #basic-commands

2 : Input Error
      The input given is not understandable from the command

3 : Error
      This is a general error

4 : [file]: No such file or directory
      The file cannot be found

5 : Network unavailable
      The network interface is not functional

6 : Display not attached
      The display is not connected / registered.

7 : Filesystem unwritable, board in developer mode
      This error shows up when a write to the internal storage occures while developer mode
      is enabled.
      By CircuitPython design, when the internal storage is being made available from usb,
      it is unwritable to ljinux.
      To disable developer mode, set `usb_msc_enabled = false` under section [LJINUX] in the board's
      `/settings.toml`.

8 : Missing files
      This error occurs when files needed for the command to run are missing.

9 : Missing arguments
      This error occur when the command is used without the necessary parameters.

10 : File exists
      A file that shouldn't exist, does exist.

11 : Not enough system memory
      POV: you are using a microcontroller.

12 : Error, variable already used:
      The variable name specified is already in use, and can't be modified in this way.

13 : Terminal too small, minimum size: size:
      The current terminal size is too small, resize the terminal to a size bigger than
      the one specified.

14 : Is a file
      What was passed, is a file, when it shouldn't.

15 : Is a directory
      What was passed, is a directory, when it shouldn't.

16 : Directory not empty
      The directory should have been empty, but wasn't.

17 : Not a directory
      What was passed, is not a directory, when it should.

18 : Not a file
      What was passed, is not a file, when it should.

19 : Not a device
      What was passed, is not a device, when it should.

20 : Unhandled exception
      Under fpexec execution, an exception was raised that was not caught by any code from within
      the fpexec code, and it was instead caught by ljinux.


      /--------------|
----<| Api Functions |
      \--------------|

Ljinux api functions.
Available from:
      ljinux.api.[function](parameters)

      setvar(var, data=None, system=False)
        Variable setter / deleter.
        Sets variable var, in ljinux.based.user_vars.
        The var name has to be an str.
        When the data is None, deletes the variable.
        The system option, when True, uses ljinux.based.system_vars instead.

      getvar(var)
        Variable getter.
        Returns variable var, from ljinux.based.user_vars or ljinux.based.system_vars.
        The var name has to be an str.
        In case it doesn't exist, returns None.

      xarg(rinpt=None, fn=False)
        Argument parser.
        When no input stream specified, rely on ljinux.based.user_vars["argj"].
        Returns a dict with the following stuff:
          "w" for the words that don't belong to a specific option.
               Example: "ls /bin", "/bin" is gonna be returned in "w"
          "hw" for the words, that were hidden due to an option. Example "ls -a /bin", "/bin" is
               not gonna be in "w" as it is a part of "o" but will be in "hw".
          "o" for all the options, with their respective values.
               Example: "ls -a /bin", {"a": "/bin"} is gonna be in "o"
          "n" if False is passed to fn, contains the filename

      fopen(object)
        Meant to be used with "with".
        Opens files with the path automatically parsed by betterpath.
        Also remounts the filesystem when in write or append mode automatically.
        Example:
          with ljinux.api.fopen("/bin/nano.py", "w")

      isdir(dirr, rdir=None)
        Checks if given item is file (returns 0) or directory (returns 1).
        Returns 2 if it doesn't exist.

        rdir specifies reference directory.
        When None, automatically use . as reference.

      betterpath(back=None)
        Automatically rewrite paths to match virtual filesystem.
        /LjinuxRoot/bin/nano.py -> /bin/nano.py
        /boot_out.txt -> &/boot_out.txt
        / -> &
        ~ automatically parsed

        When None, return current directory.

      adv_input(whatever, _type)
        Universal variable request
        Returns the variable's value in the specified type
        Parameters:
            whatever : The name of the variable
            _type : The type in which it should be returned
        Returns:
            The result of the variable in the type
            specified if found
            Otherwise, it returns the input


      /--------|
----<| jCurses |
      \--------|

jCurses are the ljinux version of nCurses.
The library is preinstalled in "/lib".

Each program should use it's own jcurses object.
Based, by default, creates the "term" jcurses object.

Useful functions:

    - .write(strr=str, end="\n")
     The default write function for ljinux.
     Always prints to the active terminal only.

    - .nwrite(strr=str)
     Same as `.write`, but does not print "\n" at the end.
     It saves byte size when there are 25 septilion `end=""`'s.
     Always prints to the active terminal only.

    - .detect_size()
     Detects the size of the terminal & returns it as [rows, collumns]

    - .detect_pos()
    Detects the current cursor position & returns it as [row, collumn]

    - .ctx_reg(name)
    Registers the current cursor position as a bookmark with the name specified.

    - .move(ctx=None, x=None, y=None)
    Moves the cursor to a specified x (row), y (collumn), or a bookmark.
    You can specify both a bookmark & and x, y coordinate.
    In that case, the x, y will be used as an offset.

    - .clear()
    Clears the screen & goes to top.

    - .clear_line()
    Clears the current line.

    - .line(char)
    Draws a line with the given char.

    - .map()
    Testing function, prints chars inputted.

    - .rem_gib()
    Empty stdin for ansi code usage. The data is not discarded.

jCurses does not depend onto ljinux.

More documentation on jcurses will be added later.


      /-------------|
----<| Led activity |
      \-------------|

Ljinux supports both generic led's as well as neopixels for it's activity led.

Generic leds stay on when idle, and off on command activity.
Neopixels stay green when idle,
Glow more when special characters are being inputted,
Red when an error occurs,
Yellow on activity and
Blue when waiting.


      /-----------|
----<| BetterPath |
      \-----------|

The ljinux kernel is in the board's root, while the os root is under /LjinuxRoot.
This is so that it is possible to use an sdcard as a root instead.
Betterpath is a function that is integrated into ljinux to make the
os appear and function as if /LjinuxRoot is the real root.
It works by standing as a middleman between all os path requests.
However it doesn't prohibit the access to the board's real root.
It work by mapping:

    Real path | Betterpath
       "/"    |  "&/"
"/LjinuxRoot" |  "/"

And treating all subsequent paths by that rule.
It additionally maps "~" to the user's home directory, and "-" to the previous directory.


      /-----------| [                                    ]
----<| GPIO Usage | [ DEPRECATED, SOON TO BE REPLACED!!! ]
      \-----------| [                                    ]

From within the based shell you can use the unused GPIO pins as variables.
Example:

    a = GP9
    a = 1

This would allocate GPIO 9 to variable 'a' and set it's value to 1.

To deinit the pin, simply unset the variable like:
Example 2:

    unset a

To read a GPIO's value, it has to be already set into a variable (Example 1) and used like:
Example 3:

    b = a
    echo b


      /---------------------|
----<| Network driver usage |
      \---------------------|

To use the built-in circuitpython module "wifi" as your network connection:
  - Run "modprobe driver_wifi as network" to load the ljinux wifi driver.
     You can optionally add it to /boot/Init.lja, to load it on boot.
  - Use iwctl to configure the wifi connection.
     For info on how to use iwctl, please refer to
     [https://wiki.archlinux.org/title/iwd]
  - You connections will automatically be stored into &/settings.toml.
     You can automatically reconnect on reboot by running `iwctl station wifi auto`.


To use a w5500 ethernet module:
  - Ensure you have run "make w5500" from the host computer.
     If you haven't, run "devmode" from within ljinux, to enable usb access,
     and perform the module installation. Then disable developer mode (as stated above)
     and reboot ljinux.
  - Run "modprobe driver_w5500 as network" to load the ljinux wifi driver.
     You can optionally add it to /boot/Init.lja, to load it on boot.
  - Use eth to configure the network interface.
     For more information please refer to the manpage by running "man eth".
     This is not implemented. Good luck.


      /-------------------|
----<| Isolated processes |
      \-------------------|

During ljinux execution every variable created persists across processes.
And every process can access any other process's stuff. Securitey!
Having a parser that effectively blocks touching other processes would be
too much of an overhead and impractical.

Still, it's possible there are variable nameshakes and forgotten variables.
(If you use variable "i", your parent process could also be using it, and you could
break some loop, causing a `while True`)
(If you do not delete your variable before the program exit, it WILL REMAIN!)

For this I made a container storage for processes.
Whenever fpexec is run, the code inside gets a pid.
You can read that value with `get_pid()`.
Every process also gets a dict in `pv`.
This dict will be automatically deleted after the process is exited.

You can directly access from python it as `pv[get_pid()]`.

To set a (new) variable directly from python,
run `pv[get_pid()]["new_variable_name"] = whatever_value`.

However that is long and ugly. There are functions for managing container varibles.
To set a variable:
`vr("variable_name", value)`

To get the value:
`vr("variable_name")`

To add a value to a variable:
`vrp("variable_name", value)`
`vrp("variable_name")` # += 1 to the variable.

To subtract a value from a variable:
`vrm("variable_name", value)`
`vrm("variable_name")` # -= 1 to the variable.

To append a value to a variable:
`vra("variable_name", value)`

To delete a variable:
`vrd("variable_name")`

Still if you want to iterate with for, you have to do this:
```py
for pv[get_pid()]["i"] in vr("some_list"):
      vr("data", vr("i") * potatoes)
```

You can use read-only properties of the variables just fine with `vr`.
`vr("socket").accept()`

But if you need to write to it, you need to access it directly.
`pv[get_pid()]["list"].pop(2)`


      /-----------------------------|
----<| Contributions to the project |
      \-----------------------------|

To commit to the project, make sure you have pre-commit installed.
On Arch Linux the packaged is named "python-pre-commit".
And then you have run `pre-commit install` inside of the repo.
Then upon committing changes, they will be immediately formatted.
